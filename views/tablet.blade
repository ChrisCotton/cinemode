!!! 5
include 'shared'

html(lang="en")
  head
    title Tablet
    
    meta(charset="utf-8")
    
    call socketioH()
    call jqueryH()
    call jqueryuiH()
    call bootstrapH()
    call simpleCartH()
    // call bootstrapSliderH()
    
    :js
      simpleCart({
          cartColumns: [
              { attr: "name" , label: "Name" },
              { attr: "price" , label: "Price", view: 'currency' },
              { view: "decrement" , label: false },
              { attr: "quantity" , label: "Qty" },
              { view: "increment" , label: false },
              { attr: "total" , label: "SubTotal", view: 'currency' },
              { view: "remove" , text: "Remove" , label: false }
          ],
          
          // "div" or "table" - builds the cart as a table or collection of divs
          cartStyle: "table", 
          
          // how simpleCart should checkout, see the checkout reference for more info 
          checkout: { 
              type: "PayPal" , 
              email: "you@yours.com" 
          },
          
          // set the currency, see the currency reference for more info
          currency: "USD",
          
          // collection of arbitrary data you may want to store with the cart, 
          // such as customer info
          data: {},
          
          // set the cart langauge (may be used for checkout)
          language: "english-us",
          
          // array of item fields that will not be sent to checkout
          excludeFromCheckout: [],
            
          // custom function to add shipping cost
          shippingCustom: null,
            
          // flat rate shipping option
          shippingFlatRate: 0,
          
          // added shipping based on this value multiplied by the cart quantity
          shippingQuantityRate: 0,
          
          // added shipping based on this value multiplied by the cart subtotal
          shippingTotalRate: 0,
          
          // tax rate applied to cart subtotal
          taxRate: 0,
          
          // true if tax should be applied to shipping
          taxShipping: false,
          
          // event callbacks 
          beforeAdd               : null,
          afterAdd                : null,
          load                    : null,
          beforeSave              : null,
          afterSave               : null,
          update                  : null,
          ready                   : null,
          checkoutSuccess             : null,
          checkoutFail                : null,
          beforeCheckout              : null
        }); 
      
    :less
      .product{
        border-style: solid;
        border-width: 0px;
        border-color: grey;
      }
      
      table{
        width: 100%;
      }
      
      .item_desc{
        width:700px;
      }
      
  body
    .container
      h2 Tablet
      
      //p#message
      
      #product1.product.simpleCart_shelfItem
        h3.item_name T-shirt
        label(style="display:inline;") unit price: 
        span.item_price $30
        br
        label(style="display:inline;") quantity: 
        input.item_Quantity(type="text" value="1")
        br
        a.item_add(href="javascript:;") Add to Cart
        
      #product2.product.simpleCart_shelfItem
        h3.item_name Cap
        label(style="display:inline;") unit price: 
        span.item_price $10
        br
        label(style="display:inline;") quantity: 
        input.item_Quantity(type="text" value="1")
        br
        a.item_add(href="javascript:;") Add to Cart
        
      //- #product3.product.simpleCart_shelfItem
      //-   img.pull-left(src="http://placehold.it/120x120" styple="margin: 0px 10px;")
      //-   h3.item_name Shoes
      //-   lebal(style="display:inline;") description:
      //-   div.item_desc Voluptas commodi incidunt ducimus excepturi quasi voluptatem sit. Atque et molestiae doloribus deserunt nihil temporibus animi eos. Architecto officiis et assumenda totam repellat nihil animi. Ut quo eaque consequatur. Pariatur autem voluptatum ut quo nemo suscipit.
      //-   label(style="display:inline;") unit price: 
      //-   span.item_price $80
      //-   br
      //-   label(style="display:inline;") quantity: 
      //-   input.item_Quantity(type="text" value="1")
      //-   br
      //-   a.item_add(href="javascript:;") Add to Cart
      
      
      call function product({img:"http://placehold.it/120x120", name:"Shoes", price:80 })#product3
      
      br
      p#time
      #time_slider(style="width:400px")
        
      br
      .btn-group
        button.btn(onclick="remote_video_prev()") prev
        button.btn(onclick="remote_video_play()") play
        button.btn(onclick="remote_video_pause()") pause
        button.btn(onclick="remote_video_next()") next
        button.btn(onclick="remote_video_like()") like
      br
      p vol 
      #volume_slider(style="width:100px")
      //- input#volumn_control(type="text" value="" class="span2 slider" 
      //-     data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-value="50" 
      //-     data-slider-orientation="horizontal" data-slider-selection="after" data-slider-tooltip="show")
      
      .row
        .simpleCart_items
        a.btn.pull-right.simpleCart_checkout(href="javascript:;")  Checkout
        
      p#info
      //- button(onclick="socket.emit('video:volume_ask')") vol
    :cs
      this.socket         = io.connect( #{global.host} )
      this.time_slider    = $('#time_slider')
      this.time_p         = $('p#time')
      this.volume_slider  = $('#volume_slider')
      
      
      this.setVolume = (v) -> 
        volume_slider.slider "option", "value", Math.round(100*v)
      
      this.setTime = (t) ->
        time_slider.slider "option", "value", t
      
      this.setDuration = (d) ->
        time_slider.slider "option", "max", d
        
      this.getDuration = () ->
        time_slider.slider "option", "max"
      
      secToMin = (s) ->
        m = Math.floor( s / 60 )
        s = Math.round( s % 60 )
        s = "0" + s if s < 10
        "#{m}:#{s}"
      
      this.setTimeP = (t) ->
        time_p.text ( secToMin(t) + "/" + secToMin( getDuration() ) )
    :cs
      # setup widget
      $('.product').hide()
      
      this.timeControlMode = false
      time_slider.slider { 
        min: 0 
        , 
        start: () -> timeControlMode = true
        , 
        stop:  () -> timeControlMode = false
        ,
        slide: (ev, ui) ->
          setTimeP ui.value
          socket.emit 'video:current_time', ui.value
        }
      socket.emit 'video:duration_ask'
      
      volume_slider.slider { 
        max: 100
        , 
        min: 0
        , 
        step: 1
        , 
        slide: (ev,ui) -> 
          socket.emit 'video:volume', ui.value / 100
        }
      socket.emit 'video:volume_ask'
      
      # command
      this.remote_video_play  = () -> socket.emit 'video:play'
      this.remote_video_pause = () -> socket.emit 'video:pause'
      this.remote_video_stop  = () -> socket.emit 'video:stop'
      this.remote_video_like  = () -> socket.emit 'video:like'
      this.remote_video_next  = () -> socket.emit 'video:next'
      this.remote_video_prev  = () -> socket.emit 'video:prev'
      
      # info
      #socket.on 'video:ended', () -> socket.emit 'video:duration_ask'
      socket.on 'video:loaded_metadata', () -> socket.emit 'video:duration_ask'
      socket.on 'video:volume_change', (v) -> setVolume v
      # 
      socket.on 'video:duration_reply', (d) -> setDuration d
      socket.on 'video:volume_reply', (v) -> setVolume v
        
    :js
      socket.on('video:time', function(t){
        if( ! timeControlMode){
          setTimeP(t); 
          setTime(t);
        }
        
        $('.product').hide();
        if( t < 0 ){
          // unexpedted
        }else if( t < 10 ){
          $('div#product1').show();
        }else if( t < 20){
          $('div#product2').show();
        }else{
          $('div#product3').show();1
        }
      });
      
    :cs
      socket.emit 'ready'